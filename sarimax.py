# -*- coding: utf-8 -*-
"""SARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REK6yRv7rJz8EUV0uqUjf46_64F9H9Rc
"""

import pandas as pd

# Load the datasets
pre_pandemic = pd.read_csv('data_files/pre_pandemic.csv')
pandemic = pd.read_csv('data_files/pandemic.csv')
post_pandemic = pd.read_csv('data_files/post_pandemic.csv')


post_pandemic.rename(columns={'AVAILABLE_BIKE_STANDS':'AVAILABLE BIKE STANDS',
                        'AVAILABLE_BIKES': 'AVAILABLE BIKES'}, inplace=True)


for df in [pre_pandemic, pandemic, post_pandemic]:
    df['TIME'] = pd.to_datetime(df['TIME'])


def calculate_bike_usage(df):
    df = df.sort_values(['STATION ID', 'TIME'])
    df['BIKE_USAGE'] = df.groupby('STATION ID')['AVAILABLE BIKES'].diff().abs()
    df['BIKE_USAGE'] = df['BIKE_USAGE'].fillna(0)
    return df

pre_pandemic = calculate_bike_usage(pre_pandemic)
pandemic = calculate_bike_usage(pandemic)
post_pandemic = calculate_bike_usage(post_pandemic)

from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt


station_id = pre_pandemic['STATION ID'].iloc[0]
station_data = pre_pandemic[pre_pandemic['STATION ID'] == station_id]


decomposition = seasonal_decompose(station_data['BIKE_USAGE'], model='additive', period=7)
decomposition.plot()
plt.show()

from statsmodels.tsa.statespace.sarimax import SARIMAX


p, d, q = 1, 1, 1
P, D, Q, s = 1, 1, 1, 7


sarima_model = SARIMAX(station_data['BIKE_USAGE'],
                       order=(p, d, q),
                       seasonal_order=(P, D, Q, s),
                       enforce_stationarity=False,
                       enforce_invertibility=False)

sarima_result = sarima_model.fit()


print(sarima_result.summary())

pandemic_forecast = sarima_result.get_forecast(steps=len(pandemic['TIME'].unique()))
pandemic_forecast_ci = pandemic_forecast.conf_int()


post_pandemic_forecast = sarima_result.get_forecast(steps=len(post_pandemic['TIME'].unique()))
post_pandemic_forecast_ci = post_pandemic_forecast.conf_int()

actual_pandemic_usage = pandemic[pandemic['STATION ID'] == station_id]['BIKE_USAGE'].sum()
predicted_pandemic_usage = pandemic_forecast.predicted_mean.sum()
impact_during_pandemic = actual_pandemic_usage - predicted_pandemic_usage

actual_post_pandemic_usage = post_pandemic[post_pandemic['STATION ID'] == station_id]['BIKE_USAGE'].sum()
predicted_post_pandemic_usage = post_pandemic_forecast.predicted_mean.sum()
impact_after_pandemic = actual_post_pandemic_usage - predicted_post_pandemic_usage

print(f"Impact during pandemic: {impact_during_pandemic}")
print(f"Impact after pandemic: {impact_after_pandemic}")

from statsmodels.tsa.stattools import adfuller

def check_stationarity(timeseries):

    print('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key, value in dftest[4].items():
        dfoutput['Critical Value (%s)' % key] = value
    print(dfoutput)


check_stationarity(station_data['BIKE_USAGE'])

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

def plot_acf_pacf(timeseries, lags=40):
    fig = plt.figure(figsize=(12, 8))
    ax1 = fig.add_subplot(211)
    fig = plot_acf(timeseries, lags=lags, ax=ax1)
    ax1.xaxis.set_ticks_position('bottom')
    fig.tight_layout();

    ax2 = fig.add_subplot(212)
    fig = plot_pacf(timeseries, lags=lags, ax=ax2)
    ax2.xaxis.set_ticks_position('bottom')
    fig.tight_layout();

    plt.show()


plot_acf_pacf(station_data['BIKE_USAGE'])

